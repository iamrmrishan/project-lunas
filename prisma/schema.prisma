// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  userName  String    @unique
  password  String
  posts     Post[]
  reviews   Review[]
  comments  Comment[]
  media     Media[]
  votes     Votes[]
  badges    Badges[]
  points    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  title      String
  body       String
  tags       String[]
  mediaId    String[]
  media      Media     @relation(fields: [mediaId], references: [id])
  comments   Comment[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  votes      Votes[]
  badges     Badges[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  title      String
  body       String
  tags       String[]
  youtubeUrl String?
  mediaId    String[]
  media      Media     @relation(fields: [mediaId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  comments   Comment[]
  votes      Votes[]
  Badges     Badges[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  url       String
  Post      Post[]
  Review    Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  postId          String    @db.ObjectId
  post            Post      @relation(fields: [postId], references: [id])
  reviewId        String    @db.ObjectId
  review          Review    @relation(fields: [reviewId], references: [id])
  userId          String    @db.ObjectId
  parentCommentId String?   @db.ObjectId
  parentComment   Comment?  @relation("parentChild", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Comment         Comment[] @relation("parentChild")
  user            User      @relation(fields: [userId], references: [id])
  body            String
  votes           Votes[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Category {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  parentId String?    @map("parentId") @db.ObjectId
  parent   Category?  @relation(name: "CategoryParent", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children Category[] @relation(name: "CategoryParent")
  Post     Post[]
  Review   Review[]
}

model Votes {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  isUpVote   Boolean
  isDownVote Boolean
  postId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id])
  reviewId   String   @db.ObjectId
  review     Review   @relation(fields: [reviewId], references: [id])
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  commentId  String   @db.ObjectId
  comment    Comment  @relation(fields: [commentId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Badges {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  postId       String @db.ObjectId
  post         Post   @relation(fields: [postId], references: [id])
  reviewId     String @db.ObjectId
  review       Review @relation(fields: [reviewId], references: [id])
  lightModeUrl String
  darkModeUrl  String
  userId       String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
}
